buildscript {
    if (project == rootProject) {
        repositories {
            mavenCentral()
            google()
        }
        dependencies {
            classpath 'com.android.tools.build:gradle:3.4.1'
        }
    }
}

plugins {
    id 'com.android.library'
    id 'maven-publish'
}

def safeExtGet(prop, fallback) {
    rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
}

def DEFAULT_COMPILE_SDK_VERSION = 28
def DEFAULT_BUILD_TOOLS_VERSION = '28.0.3'
def DEFAULT_MIN_SDK_VERSION = 26
def DEFAULT_TARGET_SDK_VERSION = 28

android {
    compileSdkVersion safeExtGet('compileSdkVersion', DEFAULT_COMPILE_SDK_VERSION)
    buildToolsVersion safeExtGet('buildToolsVersion', DEFAULT_BUILD_TOOLS_VERSION)
    defaultConfig {
        minSdkVersion safeExtGet('minSdkVersion', DEFAULT_MIN_SDK_VERSION)
        targetSdkVersion safeExtGet('targetSdkVersion', DEFAULT_TARGET_SDK_VERSION)
        versionCode 1
        versionName "1.0"
    }
}

repositories {
    mavenLocal()
    maven {
        url "$rootDir/../node_modules/react-native/android"
    }
    maven {
        url "$rootDir/../node_modules/jsc-android/dist"
    }
    google()
}

dependencies {
    implementation 'com.facebook.react:react-native:+'  // From node_modules
}

def configureReactNativePom(def pom) {
    def packageJson = new groovy.json.JsonSlurper().parseText(file('../package.json').text)

    pom.withXml {
        def project = asNode()
        project.appendNode('name', packageJson.title)
        project.appendNode('artifactId', packageJson.name)
        project.appendNode('version', packageJson.version)
        project.appendNode('groupId', 'com.reactlibrary')
        project.appendNode('description', packageJson.description)
        project.appendNode('url', packageJson.repository.baseUrl)

        project.appendNode('licenses').appendNode('license').with {
            appendNode('name', packageJson.license)
            appendNode('url', "${packageJson.repository.baseUrl}/blob/master/${packageJson.licenseFilename}")
            appendNode('distribution', 'repo')
        }

        project.appendNode('developers').appendNode('developer').with {
            appendNode('id', packageJson.author.username)
            appendNode('name', packageJson.author.name)
        }
    }
}

afterEvaluate { project ->
    task androidJavadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += files(android.bootClasspath)
        // classpath += files(android.sourceSets.main.compileClasspath)
        classpath += files(android.sourceSets.main.java.srcDirs) + files(android.getBootClasspath())

        include '**/*.java'
    }

    task androidJavadocJar(type: Jar, dependsOn: androidJavadoc) {
        archiveClassifier.set('javadoc')
        from androidJavadoc.destinationDir
    }

    task androidSourcesJar(type: Jar) {
        archiveClassifier.set('sources')
        from android.sourceSets.main.java.srcDirs
        include '**/*.java'
    }

    android.libraryVariants.all { variant ->
        def name = variant.name.capitalize()
        def javaCompileTask = variant.javaCompileProvider.get()

        task "jar${name}"(type: Jar, dependsOn: javaCompileTask) {
            from javaCompileTask.destinationDir
        }
    }

    artifacts {
        archives androidSourcesJar
        archives androidJavadocJar
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                pom {
                    withXml {
                        asNode().append(configureReactNativePom)
                    }
                }
            }
        }

        repositories {
            maven {
                url "file://${projectDir}/../android/maven"
            }
        }
    }
}
